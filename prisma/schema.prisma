// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//generator client {
//  provider = "prisma-client-js"
//  output   = "../generated/prisma"
//}

//datasource db {
//  provider = "postgresql"
//  url      = env("DATABASE_URL")
//}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------
// Enums
// ------------------------------
enum UserRole {
  ADMIN
  ORGANIZER 
  PARTICIPANT
}

enum EventType {
  ONSITE
  ONLINE
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ONGOING
  COMPLETED
  CANCELLED
}

enum JoinStatus {
  PENDING // Waiting for organizer approval
  APPROVED // Approved, confirmed seat
  REJECTED // Rejected, cannot join
}

// ------------------------------
// Models
// ------------------------------
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?
  fullName     String
  role         UserRole @default(PARTICIPANT)
  phone        String?  @unique
  profilePic   String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  eventsCreated Event[]        @relation("EventOrganizers")
  participants  Participant[]
  hostedEvents  Host[]         @relation("UserHosts")
  otps          OtpCode[]
  tokens        RefreshToken[]
  favoriteEvents Event[]       @relation("UserFavorites")
}

model Event {
  id             String    @id @default(cuid())
  title          String
  description    String
  totalSeats     Int?
  confirmedCount Int       @default(0) // Keep in sync in services
  type           EventType
  venue          String?
  joinLink       String?
  thumbnail      String
  contactInfo    String
  startAt        DateTime
  endAt          DateTime
  status         EventStatus @default(PUBLISHED)
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organizers   User[]        @relation("EventOrganizers")
  participants Participant[]
  attachments  Attachment[]
  hosts        Host[]        @relation("EventHosts")
  favoredBy    User[]        @relation("UserFavorites")
}

model Host {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?  @unique
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())

  // Optional link to User if host is also a registered user
  userId String?
  user   User?   @relation("UserHosts", fields: [userId], references: [id])

  // Relations
  events Event[] @relation("EventHosts")
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  type      String // e.g. "image" | "video" | etc
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Participant {
  id        String     @id @default(cuid())
  userId    String
  eventId   String
  status    JoinStatus @default(PENDING) // Approval status
  createdAt DateTime   @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // user can request/join once
}

model OtpCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, code])
}

model RefreshToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
