generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  passwordHash   String?
  fullName       String
  role           UserRole       @default(PARTICIPANT)
  phone          String?        @unique
  profilePic     String?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  createdById    String?
  hostedEvents   Host[]         @relation("UserHosts")
  otps           OtpCode[]
  participants   Participant[]
  tokens         RefreshToken[]
  createdBy      User?          @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers   User[]         @relation("UserCreatedBy")
  eventsCreated  Event[]        @relation("EventOrganizers")
  favoriteEvents Event[]        @relation("UserFavorites")
}

model Event {
  id             String        @id @default(cuid())
  title          String
  description    String
  totalSeats     Int?
  confirmedCount Int           @default(0)
  type           EventType
  venue          String?
  joinLink       String?
  thumbnail      String
  contactInfo    String
  startAt        DateTime
  endAt          DateTime
  status         EventStatus   @default(PUBLISHED)
  isDeleted      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  attachments    Attachment[]
  participants   Participant[]
  hosts          Host[]        @relation("EventHosts")
  organizers     User[]        @relation("EventOrganizers")
  favoredBy      User[]        @relation("UserFavorites")
}

model Host {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?  @unique
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation("UserHosts", fields: [userId], references: [id])
  events    Event[]  @relation("EventHosts")
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  type      String
  eventId   String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Participant {
  id        String     @id @default(cuid())
  userId    String
  eventId   String
  status    JoinStatus @default(PENDING)
  createdAt DateTime   @default(now())
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model OtpCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, code])
}

model RefreshToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  ORGANIZER
  PARTICIPANT
}

enum EventType {
  ONSITE
  ONLINE
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ONGOING
  COMPLETED
  CANCELLED
}

enum JoinStatus {
  PENDING
  APPROVED
  REJECTED
}
